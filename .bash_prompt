#!/bin/bash

git_prompt() {
  local s='';
  local branchName='';

  # Check if current directory is in a Git repository
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # Check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      #Ensure index is up to date
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in index
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi
  
      # Check for unstaged changes
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi
  
      # Check for untracked files 
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi
      
      # Check for stashed files   
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi
    fi
      
    # Get the short symbolic ref
    # If HEAD isn't a symbolic ref, get the short SHA for last commit
    # Otherwise, give up
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                  git rev-parse --short HEAD 2> /dev/null || \
                  echo '(Unkown)')";

    [ -n "${s}" ] && s=" ${s}";
      echo -e "$(tput setab 4 && tput setaf 2)${1}${branchName}${s} $(tput sgr0 && tput setaf 4)";
    else
      echo -e "$(tput sgr0 && tput setaf 2)";
      return; 
  fi
}

#Reset all colors
tput sgr0;

#Create variable references
bold=$(tput bold);
underlineStart=$(tput smul);
underlineEnd=$(tput rmul);
reset=$(tput sgr0);
black=$(tput setaf 0);
red=$(tput setaf 1);
green=$(tput setaf 2);
yellow=$(tput setaf 3);
blue=$(tput setaf 4);
magenta=$(tput setaf 5);
cyan=$(tput setaf 6);
white=$(tput setaf 7);

#Colored Bars
pmptGray=$(tput setab 8 && tput setaf 7);
pmptGrayToGreen=$(tput setab 2 && tput setaf 8);
pmptGreenToBlue=$(tput setab 4 && tput setaf 2);
pmptGreemTerminate=$(tput sgr0 && tput setaf 2);
pmptBlueTerminate=$(tput sgr0 && tput setaf 4);

# Begin building Prompt (PS1 Variable)
PS1="";
PS1="${pmptGray} ${USER} ${pmptGrayToGreen} \w ";

# Git Status & Branch
PS1+="\$(git_prompt \"\[${white}\]  \")"; # Git repository details
PS1+="${reset}\n$ ";
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
